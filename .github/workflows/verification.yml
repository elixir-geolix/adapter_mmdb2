name: Verification

on: [push, pull_request]

jobs:
  check:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v3

    - name: setup-python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: setup
      id: setup
      uses: erlef/setup-beam@v1
      with:
        elixir-version: '1.14.2'
        otp-version: '25.0'

    - name: mix-cache
      uses: actions/cache@v3
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ steps.setup.outputs.otp-version }}-${{ steps.setup.outputs.elixir-version }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

    - name: mix-deps
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get

    - name: pip-deps
      run: |
        python -m pip install --upgrade pip
        pip install geoip2

    - name: verify
      env:
        MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      run: |
        mkdir data
        cd data

        curl -s "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz" -o GeoLite2-ASN.tar.gz
        curl -s "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz" -o GeoLite2-City.tar.gz
        curl -s "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz" -o GeoLite2-Country.tar.gz

        tar -xzf GeoLite2-ASN.tar.gz
        tar -xzf GeoLite2-City.tar.gz
        tar -xzf GeoLite2-Country.tar.gz

        find . -name '*.mmdb' -exec mv {} . \;

        cd -
        cd verify

        . ./generate_ip_set.sh

        cd geolix && mix geolix.verify && cd -
        cd python && python3 verify.py && cd -

        diff geolix_results.txt python_results.txt
